CREATE TABLE CUSTOMERS (
  customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1)  PRIMARY KEY,
  name VARCHAR2(100) NOT NULL,
  surname VARCHAR2(100) NOT NULL,
  address VARCHAR2(255) NOT NULL
);
/
CREATE TABLE ORDERS (
  product VARCHAR2(100) NOT NULL,
  cnt NUMBER NOT NULL,
  price NUMBER NOT NULL,
  customer_id NUMBER NOT NULL
);
/

CREATE OR REPLACE PROCEDURE json_parser (
    json_data IN CLOB
) AS
    v_customer_id NUMBER;
BEGIN
    INSERT INTO CUSTOMERS (name, surname, address)
    SELECT imie, nazwisko, adres
    FROM JSON_TABLE(json_data, '$.klient'
        COLUMNS (
            imie VARCHAR2(100) PATH '$.imie',
            nazwisko VARCHAR2(100) PATH '$.nazwisko',
            adres VARCHAR2(100) PATH '$.adres'
        ));

    SELECT customer_id INTO v_customer_id
    FROM CUSTOMERS
    ORDER BY customer_id DESC
    FETCH FIRST 1 ROW ONLY;

    INSERT INTO ORDERS (product, cnt, price, customer_id)
    SELECT produkt, ilosc, cena, v_customer_id
    FROM JSON_TABLE(json_data, '$.zamowienia[*]'
        COLUMNS (
            produkt VARCHAR2(100) PATH '$.produkt',
            ilosc NUMBER PATH '$.ilosc',
            cena NUMBER PATH '$.cena'
        ));
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Great');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Not so great' || SQLERRM);
        ROLLBACK;
END json_parser;
/


DECLARE
    v_json CLOB;
BEGIN
    v_json := '{
"klient": {
"imie": "Jan",
"nazwisko": "Kowalski",
"adres": "ul. Testowa 123, 00-000 Warszawa"
},
"zamowienia": [
{
"produkt": "Laptop",
"ilosc": 1,
"cena": 3500.00
},
{
"produkt": "Smartphone",
"ilosc": 2,
"cena": 1500.00
},
{
"produkt": "SÅ‚uchawki bezprzewodowe",
"ilosc": 1,
"cena": 200.00
}
]
}';
    json_parser(v_json);
END;
/
